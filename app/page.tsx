"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Heart, Key } from "lucide-react"
import { AnimatedEnvelope } from "@/components/animated-envelope"
import { ThemeControls } from "@/components/theme-controls"
import { Fireworks } from "@/components/fireworks"
import { RomanticParticles } from "@/components/romantic-particles"
import { useTheme } from "@/hooks/use-theme"
import { useLanguage } from "@/hooks/use-language"
import Image from "next/image"
import toothless from "@/app/toothless.png"
import stich from "@/app/stichh.png"
import kitty from "@/app/kitty.webp"

const CORRECT_PASSWORD = "1122"

const LETTER_CONTENT = {
  ru: {
    title: "–ú–æ—ë —Å–µ—Ä–¥—Ü–µ",
    text: `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π.
–ï—Å–ª–∏ —á–µ—Å—Ç–Ω–æ, —è –µ—â—ë –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏–ª –∫ –¥–µ–≤—É—à–∫–µ, —á—Ç–æ–±—ã —Å–∫–∞–∑–∞—Ç—å –µ–π, —á—Ç–æ –æ–Ω–∞ –º–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è, –Ω–æ –∫ —Ç–µ–±–µ –ø–æ–¥–æ—à—ë–ª. –Ø –≤–æ—Ç —Å–µ–π—á–∞—Å —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂—É: –∫–æ–≥–¥–∞ —è –≤–ø–µ—Ä–≤—ã–µ —É–≤–∏–¥–µ–ª —Ç–µ–±—è, —Ç—ã —Å—Ä–∞–∑—É –∂–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –º–Ω–µ, –∏ —è –Ω–µ —Å–º–æ–≥ –Ω–µ –ø–æ–¥–æ–π—Ç–∏. –Ø –ø–æ–Ω—è–ª, —á—Ç–æ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–∂–∏—Ç—å –æ—Å—Ç–∞–≤—à—É—é—Å—è –∂–∏–∑–Ω—å —Å —Ç–æ–±–æ–π. –Ø –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç —Ö–æ–∂—É —á–∏—Å—Ç–æ –∏–∑-–∑–∞ —Ç–µ–±—è. –ü—Ä–∏—Ö–æ–∂—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ç–µ–±—è, –Ω–æ –Ω–∞ –ø–∞—Ä—ã –Ω–µ –∑–∞—Ö–æ–∂—É. –Ø –ø—Ä–∏—Ö–æ–∂—É –≤ 9:30, –∂–¥—É –¥–æ 10:50, —Ç—ã –≤—ã—Ö–æ–¥–∏—à—å –∏ –∏–¥—ë—à—å –≤ —Å—Ç–æ–ª–æ–≤—É—é, –∏ —è —Å–º–æ—Ç—Ä—é –Ω–∞ —Ç–µ–±—è. –ê –ø–æ—Ç–æ–º, –∫–æ–≥–¥–∞ —Ç—ã –∑–∞—Ö–æ–¥–∏—à—å –æ–±—Ä–∞—Ç–Ω–æ –≤ –∫–ª–∞—Å—Å, —è –∏–¥—É –¥–æ–º–æ–π. –ö–æ–Ω–µ—á–Ω–æ –∂–µ, —Ç—ã –ø–æ—Ç–æ–º –æ—Ç–∫–∞–∑–∞–ª–∞, –Ω–æ —Ç—ã –Ω–µ –¥–æ–ª–∂–Ω–∞ —Ç–∞–∫ –¥–µ–ª–∞—Ç—å. –°–µ–π—á–∞—Å —Å–∫–∞–∂—É –ø–æ—á–µ–º—É: —è –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –æ–±–∏–∂—É —Ç–µ–±—è –∏ –Ω–µ –¥–∞–º –≤ –æ–±–∏–¥—É, –±—É–¥—É –¥–µ–ª–∞—Ç—å –≤—Å—ë, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Ç–µ–±—è —Å—á–∞—Å—Ç–ª–∏–≤–æ–π, —á—Ç–æ–±—ã –Ω–∞ —Ç–≤–æ—ë–º –ª–∏—Ü–µ –≤—Å–µ–≥–¥–∞ –±—ã–ª–∞ —É–ª—ã–±–∫–∞, –±—É–¥—É –¥–∞—Ä–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏. –ò, –∫–æ–Ω–µ—á–Ω–æ –∂–µ, —è –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫ —Ö–æ—á—É —Å —Ç–æ–±–æ–π –ø–æ–æ–±—â–∞—Ç—å—Å—è ‚Äî —É –º–µ–Ω—è —Å–µ—Ä—å—ë–∑–Ω—ã–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è. –ò –Ω–µ—Ç, —è –Ω–µ —Ç–∞–∫–æ–π, –∫–∞–∫ –¥—Ä—É–≥–∏–µ, —è —Å–∏–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞—é—Å—å, –∏ —è —Ç–µ–±–µ –ø–æ—Ç–æ–º —ç—Ç–æ –ø–æ–∫–∞–∂—É.

–î–∞, —Ç—ã –Ω–µ –∑–Ω–∞–∫–æ–º–∏—à—å—Å—è, —Ç—ã –Ω–µ —Ö–æ—á–µ—à—å –æ–±—â–∞—Ç—å—Å—è, –Ω–æ —Å–æ –º–Ω–æ–π —Å—Ç–æ–∏—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å. –¢–≤–æ—è —Å—É–¥—å–±–∞ –±—É–∫–≤–∞–ª—å–Ω–æ –¥–∞—ë—Ç —Ç–µ–±–µ –±–µ—Å–ø—Ä–æ–∏–≥—Ä—ã—à–Ω—É—é –ª–æ—Ç–µ—Ä–µ—é (–º–µ–Ω—è), –∏ —Ç—ã –Ω–µ –¥–æ–ª–∂–Ω–∞ –æ—Ç–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –æ—Ç —ç—Ç–æ–π –ª–æ—Ç–µ—Ä–µ–∏. –Ø –µ—â—ë –Ω–µ –ø—Ä–∏–∑–Ω–∞–≤–∞–ª—Å—è –¥–µ–≤—É—à–∫–µ –∏ –ø–æ—ç—Ç–æ–º—É –Ω–µ –∑–Ω–∞—é, –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å, –∏ –∑–Ω–∞—é, —á—Ç–æ –ø–∏—Å—å–º–æ, –∫–æ—Ç–æ—Ä–æ–µ —è –Ω–∞–ø–∏—Å–∞–ª, –ø–æ–ª–Ω—ã–π –∫—Ä–∏–Ω–∂.
–Ø –æ—á–µ–Ω—å —Å–∏–ª—å–Ω–æ —Ö–æ—á—É, —á—Ç–æ–±—ã —Ç—ã –æ–±—â–∞–ª–∞—Å—å —Å–æ –º–Ω–æ–π. –†–∞–¥–∏ —Ç–µ–±—è —è –≥–æ—Ç–æ–≤ –Ω–∞ –≤—Å—ë. –ù–µ –≥–æ–≤–æ—Ä–∏ ¬´–Ω–µ—Ç¬ª, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.


–¢—ã –¥–ª—è –º–µ–Ω—è –æ—Å–æ–±–µ–Ω–Ω–∞—è, –∏ —è –±—É–¥—É —Ä–∞–¥, –µ—Å–ª–∏ —Ç—ã –Ω–∞–π–¥—ë—à—å –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∏—Ç—å. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø—Ä–æ—á–∏—Ç–∞–ª–∞ –≤—Å—ë —ç—Ç–æ.



–ú–æ–π Telegram: @hakimzoda16. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç.`,
    loginTitle: "–í—Ö–æ–¥ –≤ –ª–∏—á–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ",
    loginHint: "–ü–∞—Ä–æ–ª—å 1122.",
    loginButton: "–û—Ç–∫—Ä—ã—Ç—å",
    loginError: "–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ üíï",
    loginPlaceholder: "–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å...",
    envelopeHint: "–ù–∞–∂–º–∏ –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø–∏—Å—å–º–æ",
    signature: "–° –ª—é–±–æ–≤—å—é H ‚ù§Ô∏è",
  },
  en: {
    title: "My Heart",
    text: `Hello.
To be honest, I‚Äôve never approached a girl to tell her that I like her, but with you I did. I‚Äôll be honest now: when I first saw you, I immediately liked you, and I just couldn‚Äôt walk past. I realized that I want to spend the rest of my life with you. I go to the university only because of you. I come just to see you but I don‚Äôt go to classes. I arrive at 9:30, wait until 10:50, you come out and go to the cafeteria, and I look at you. Then, when you go back to the classroom, I go home. Of course, you refused me later, but you shouldn‚Äôt have. Now I‚Äôll tell you why: I will never hurt you or let anyone hurt you, I will do everything to make you happy, to keep a smile on your face, I will give you gifts. And of course, I don‚Äôt just want to talk to you ‚Äî I have serious intentions. And no, I‚Äôm not like the others, I‚Äôm very different, and I‚Äôll show you that later.

Yes, you don‚Äôt meet new people, you don‚Äôt want to talk, but with me it‚Äôs worth a try. Your destiny is literally giving you a win-win lottery (me), and you shouldn‚Äôt refuse this lottery. I‚Äôve never confessed to a girl before, so I don‚Äôt know how to do it, and I know that this letter I wrote is totally cringe.
I really want you to talk to me. For you, I‚Äôm ready for anything. Please don‚Äôt say ‚Äúno.‚Äù

You are very special to me, and I would be happy if you found the time to reply. Thank you for reading all of this.



My Telegram: @hakimzoda16. Please write me your reply.
`,
    loginTitle: "Enter Personal Space",
    loginHint: "the password is 1122)",
    loginButton: "Open",
    loginError: "Try again üíï",
    loginPlaceholder: "Enter password...",
    envelopeHint: "Click the envelope to open the letter",
    signature: "With love N ‚ù§Ô∏è",
  },
}

export default function HomePage() {
  const { isDark } = useTheme()
  const { language } = useLanguage()
  const [isMounted, setIsMounted] = useState(false)

  const [password, setPassword] = useState("")
  const [isAuthenticated, setIsAuthenticated] = useState(false)
  const [showError, setShowError] = useState(false)
  const [isEnvelopeOpen, setIsEnvelopeOpen] = useState(false)
  const [showFireworks, setShowFireworks] = useState(false)
  const [isLockOpening, setIsLockOpening] = useState(false)

  useEffect(() => {
    setIsMounted(true)
  }, [])

  if (!isMounted) return null // –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≥–∏–¥—Ä–∞—Ü–∏—é

  const letter = LETTER_CONTENT[language] || LETTER_CONTENT.ru

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    if (password === CORRECT_PASSWORD) {
      setIsLockOpening(true)
      setShowError(false)

      setTimeout(() => {
        setIsAuthenticated(true)
        setShowFireworks(true)
        setTimeout(() => setShowFireworks(false), 5000)
      }, 1500)
    } else {
      setShowError(true)
      setPassword("")
    }
  }

  if (isAuthenticated) {
    return (
      <div
        className={`min-h-screen transition-all duration-1000 ${
          isDark
            ? "bg-gradient-to-br from-purple-900 via-indigo-900 to-purple-800"
            : "bg-gradient-to-br from-pink-50 via-rose-50 to-white"
        }`}
      >
        <ThemeControls />
        <Fireworks isActive={showFireworks} isDarkMode={isDark} />
        <RomanticParticles isDarkMode={isDark} />

        {/* üé≠ –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ */}
        {/* –°—Ç–∏—Ç—á */}
        <div className="absolute top-10 left-4 sm:top-20 sm:left-8 animate-bounce">
          <div className="w-14 sm:w-20 md:w-36 lg:w-52 rounded-full overflow-hidden">
            <Image src={stich} alt="stich" width={200} height={200} className="object-contain" />
          </div>
        </div>

        {/* –ë–µ–∑–∑—É–±–∏–∫ */}
        <div className="absolute top-28 right-4 sm:top-32 sm:right-12 animate-bounce">
          <div className="w-14 sm:w-20 md:w-36 lg:w-48 rounded-full overflow-hidden">
            <Image src={toothless} alt="toothless" width={180} height={180} className="object-contain" />
          </div>
        </div>

        {/* –ö–∏—Ç—Ç–∏ */}
        <div className="absolute bottom-10 left-1/2 -translate-x-1/2 sm:bottom-20 sm:left-12 sm:translate-x-0 animate-bounce">
          <div className="w-14 sm:w-20 md:w-32 lg:w-44 rounded-full overflow-hidden">
            <Image src={kitty} alt="kitty" width={160} height={160} className="object-contain" />
          </div>
        </div>

        <div className="flex items-center justify-center min-h-screen p-4">
          <div className="text-center max-w-4xl">
            <AnimatedEnvelope
              isOpen={isEnvelopeOpen}
              onToggle={() => setIsEnvelopeOpen(!isEnvelopeOpen)}
              language={language}
              isDarkMode={isDark}
            />

            {isEnvelopeOpen && (
              <Card
                className={`max-w-md mx-auto shadow-2xl animate-fade-in transition-all duration-1000 ${
                  isDark
                    ? "bg-purple-900/90 backdrop-blur-sm border-purple-700"
                    : "bg-white/90 backdrop-blur-sm border-rose-200"
                }`}
              >
                <CardHeader className="text-center pb-3">
                  <CardTitle
                    className={`text-lg font-bold mb-2 font-caveat ${
                      isDark ? "text-rose-300" : "text-rose-600"
                    }`}
                  >
                    {letter.title}
                  </CardTitle>
                  <div className="flex justify-center gap-2">
                    {[...Array(3)].map((_, i) => (
                      <Heart
                        key={i}
                        className="w-3 h-3 animate-heart-beat text-rose-400"
                        style={{ animationDelay: `${i * 0.2}s` }}
                      />
                    ))}
                  </div>
                </CardHeader>
                <CardContent className="px-4 py-3">
                  <div className="prose prose-rose max-w-none">
                    {letter.text.split("\n\n").map((paragraph, index) => (
                      <p
                        key={index}
                        className="mb-2 leading-relaxed text-xs font-caveat text-gray-700"
                      >
                        {paragraph}
                      </p>
                    ))}
                  </div>
                  <div className="text-center mt-3 pt-2 border-t border-rose-200">
                    <p className="italic text-xs font-caveat text-rose-500">{letter.signature}</p>
                  </div>
                </CardContent>
              </Card>
            )}
          </div>
        </div>
      </div>
    )
  }

  // üîí Lock page
  return (
    <div
      className={`min-h-screen flex items-center justify-center p-4 transition-all duration-1000 ${
        isDark
          ? "bg-gradient-to-br from-purple-900 via-indigo-900 to-purple-800"
          : "bg-gradient-to-br from-pink-100 via-rose-100 to-pink-50"
      }`}
    >
      <ThemeControls />

      <div className="relative w-80 h-96">
        {/* –ó–∞–º–æ–∫ */}
        <div
          className={`absolute top-8 left-1/2 transform -translate-x-1/2 w-24 h-28 border-4 rounded-t-xl ${
            isDark ? "border-pink-400" : "border-pink-500"
          } ${isLockOpening ? "rotate-45 translate-x-8" : ""}`}
          style={{ borderBottom: "none" }}
        />

        <div
          className={`relative top-20 w-full h-48 rounded-2xl border-4 ${
            isDark
              ? "bg-gradient-to-b from-pink-500 to-rose-600 border-pink-400"
              : "bg-gradient-to-b from-pink-400 to-rose-500 border-pink-500"
          } ${isLockOpening ? "animate-pulse" : ""}`}
          style={{ borderRadius: "2rem 2rem 1.5rem 1.5rem" }}
        >
          {/* –ö–ª—é—á */}
          {isLockOpening && (
            <div className="absolute top-14 left-1/2 transform -translate-x-1/2 animate-spin-key">
              <Key
                className={`w-6 h-6 ${isDark ? "text-yellow-300" : "text-yellow-400"}`}
              />
            </div>
          )}

          {/* –í–≤–æ–¥ –ø–∞—Ä–æ–ª—è */}
          <div className="absolute bottom-4 left-4 right-4 space-y-2 text-center">
            <h2
              className={`text-base font-bold ${
                isDark ? "text-white/90" : "text-gray-800"
              }`}
            >
              {letter.loginTitle}
            </h2>
            <p
              className={`text-xs ${
                isDark ? "text-pink-100/90" : "text-white/90"
              }`}
            >
              {letter.loginHint}
            </p>
            <form onSubmit={handleSubmit} className="space-y-2">
              <Input
                type="password"
                placeholder={letter.loginPlaceholder}
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                disabled={isLockOpening}
                className={`text-center text-sm ${
                  isDark
                    ? "bg-purple-800/70 border-purple-600 text-rose-200 placeholder:text-rose-300/70 focus:border-rose-300 focus:ring-rose-300"
                    : "bg-white/80 border-rose-300 focus:border-rose-400 focus:ring-rose-400"
                }`}
              />
              {showError && <p className="text-xs text-white/90">{letter.loginError}</p>}
              <Button
                type="submit"
                disabled={isLockOpening}
                size="sm"
                className="w-full font-semibold text-xs bg-rose-600 hover:bg-rose-700 text-white"
              >
                {isLockOpening ? "–û—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è..." : letter.loginButton}
              </Button>
            </form>
          </div>
        </div>
      </div>
    </div>
  )
}
