"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Heart, Key } from "lucide-react"
import { AnimatedEnvelope } from "@/components/animated-envelope"
import { ThemeControls } from "@/components/theme-controls"
import { Fireworks } from "@/components/fireworks"
import { RomanticParticles } from "@/components/romantic-particles"
import { useTheme } from "@/hooks/use-theme"
import { useLanguage } from "@/hooks/use-language"
import Image from "next/image"
import toothless from "@/app/toothless.png"
import stich from "@/app/stichh.png"
import kitty from "@/app/kitty.webp"

const CORRECT_PASSWORD = "–ë–µ–∑–∑—É–±–∏–∫"

const LETTER_CONTENT = {
  ru: {
    title: "–ú–æ—ë —Å–µ—Ä–¥—Ü–µ",
    text: `–Ø —Ö–æ—á—É –ø–æ–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ—â–µ–Ω–∏—è –∑–∞ –≤—Å—ë, —á—Ç–æ –º–æ–≥–ª–æ —Ç–µ–±—è –æ–±–∏–¥–µ—Ç—å. –Ø –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Ö–æ—Ç–µ–ª –ø—Ä–∏—á–∏–Ω—è—Ç—å —Ç–µ–±–µ –±–æ–ª—å. –∏ —Ç–æ —á—Ç–æ –∫—Ç–æ —Ç–æ —Ç–µ–±—è –æ–±–∑—ã–≤–∞–ª –≤ –∫–ª–∞—Å—Å–µ —ç—Ç–æ –Ω–µ —è –∏–º –≥–æ–≤–æ—Ä–∏–ª, –Ω–∞–æ–±–æ—Ä–æ—Ç, —è –ø—Ä–æ—Å–∏–ª –∏—Ö –ø–µ—Ä–µ—Å—Ç–∞—Ç—å. –í—Å—ë —ç—Ç–æ –≤—Ä–µ–º—è —è –±—ã–ª –Ω–∞ —Ç–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ.–ï—Å–ª–∏ —Ç—ã –∑–∞—Ö–æ—á–µ—à—å, —è –º–æ–≥—É –æ–±—ä—è—Å–Ω–∏—Ç—å –≤—Å—ë –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ, –∫–∞–∫ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –±—ã–ª–æ. –ï—â—ë —Ä–∞–∑ –ø—Ä–æ—Å—Ç–∏ –º–µ–Ω—è –∑–∞ –≤—Å—ë.







    –£–∂–µ –ø—Ä–æ—à–ª–æ 3‚Äì4 –º–µ—Å—è—Ü–∞ —Å —Ç–µ—Ö –ø–æ—Ä, –∫–∞–∫ —è –≤–∏–¥–µ–ª —Ç–µ–±—è. –ò –≤—Å—ë —ç—Ç–æ –≤—Ä–µ–º—è —è –Ω–µ –ø–µ—Ä–µ—Å—Ç–∞–≤–∞–ª –¥—É–º–∞—Ç—å –æ —Ç–µ–±–µ. –Ø –æ—á–µ–Ω—å —Ö–æ—á—É, —á—Ç–æ–±—ã —Ç–∞ –≤—Å—Ç—Ä–µ—á–∞ –Ω–µ —Å—Ç–∞–ª–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π.
–Ø –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–∑–Ω–∞—Ç—å—Å—è: —è –≤—Å—ë –µ—â—ë –ª—é–±–ª—é —Ç–µ–±—è –∏ –∏—Å–∫—Ä–µ–Ω–Ω–µ –Ω–∞–¥–µ—é—Å—å, —á—Ç–æ —É –Ω–∞—Å –º–æ–∂–µ—Ç –±—ã—Ç—å –±—É–¥—É—â–µ–µ –≤–º–µ—Å—Ç–µ. –Ø —Å–æ–±–∏—Ä–∞–ª—Å—è –ø–æ–µ—Ö–∞—Ç—å —É—á–∏—Ç—å—Å—è –≤ –ê–Ω–≥–ª–∏—é, –Ω–æ –±—ã–ª–∏ –ø—Ä–∏—á–∏–Ω—ã, –ø–æ –∫–æ—Ç–æ—Ä—ã–º —è –Ω–µ –ø–æ–µ—Ö–∞–ª, –∏ –æ–¥–Ω–∞ –∏–∑ –Ω–∏—Ö ‚Äî —Ç—ã.

–Ø –Ω–µ –ø—Ä–æ—à—É —Ç–µ–±—è —Å—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∏–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–¥–æ–±–Ω–æ–µ. –ú–Ω–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –µ—Å–ª–∏ –º—ã –±—É–¥–µ–º –æ–±—â–∞—Ç—å—Å—è —Ö–æ—Ç—è –±—ã —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é. –Ø –ø—Ä–æ—Å—Ç–æ –Ω–µ —Ö–æ—á—É —É–ø—É—Å—Ç–∏—Ç—å —Ç–µ–±—è, –ø–æ—Ç–æ–º—É —á—Ç–æ –º–µ—á—Ç–∞—é –æ —Ç–æ–º, —á—Ç–æ–±—ã –æ–¥–Ω–∞–∂–¥—ã –∂–µ–Ω–∏—Ç—å—Å—è –Ω–∞ —Ç–µ–±–µ.

–Ø –∑–Ω–∞—é, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å—Ç–∞—Ç—å —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–æ–º, –∏ —è –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—É–¥—É –º–µ—à–∞—Ç—å —Ç–≤–æ–µ–π —É—á—ë–±–µ ‚Äî –Ω–∞–æ–±–æ—Ä–æ—Ç, –≥–æ—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ç–µ–±—è –≤–æ –≤—Å—ë–º. –ò–Ω –®–∞ –ê–ª–ª–∞—Ö, –º—ã —Å–º–æ–∂–µ–º –≤–º–µ—Å—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –∫–ª–∏–Ω–∏–∫—É –∏ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞—à–µ –±—É–¥—É—â–µ–µ.
–Ø –±—É–¥—É –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤—Å–µ —Ç–≤–æ–∏ –∫–∞–ø—Ä–∏–∑—ã, –¥–∞—Ä–∏—Ç—å —Ç–µ–±–µ —Ü–≤–µ—Ç—ã –∏ —Ä–∞–¥–æ—Å—Ç—å, –¥–µ–ª–∞—Ç—å –≤—Å—ë, —á—Ç–æ–±—ã —Ç—ã –±—ã–ª–∞ —Å—á–∞—Å—Ç–ª–∏–≤–∞. –Ø –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –æ–±–∏–∂—É —Ç–µ–±—è –∏ –Ω–µ –¥–∞–º, —á—Ç–æ–±—ã –∫—Ç–æ-—Ç–æ –ø—Ä–∏—á–∏–Ω–∏–ª —Ç–µ–±–µ –±–æ–ª—å.

–¢—ã –¥–ª—è –º–µ–Ω—è –æ—Å–æ–±–µ–Ω–Ω–∞—è, –∏ —è –±—É–¥—É —Ä–∞–¥, –µ—Å–ª–∏ —Ç—ã –Ω–∞–π–¥—ë—à—å –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∏—Ç—å. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø—Ä–æ—á–∏—Ç–∞–ª–∞ –≤—Å—ë —ç—Ç–æ.`,
    loginTitle: "–í—Ö–æ–¥ –≤ –ª–∏—á–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ",
    loginHint: "–ü–∞—Ä–æ–ª—å ‚Äî —Ç–≤–æ–π –ª—é–±–∏–º—ã–π –º—É–ª—å—Ç–ø–µ—Ä—Å–æ–Ω–∞–∂ (–ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞ ‚Äî –ë).",
    loginButton: "–û—Ç–∫—Ä—ã—Ç—å",
    loginError: "–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ üíï",
    loginPlaceholder: "–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å...",
    envelopeHint: "–ù–∞–∂–º–∏ –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø–∏—Å—å–º–æ",
    signature: "–° –ª—é–±–æ–≤—å—é H ‚ù§Ô∏è",
  },
  en: {
    title: "My Heart",
    text: `I want to apologize for everything that might have hurt you. I never meant to cause you any pain. And the fact that someone called you names in class‚Äîit wasn‚Äôt me who said it; on the contrary, I asked them to stop. All this time, I have been on your side. If you want, I can explain everything in more detail, how it really happened. Once again, I‚Äôm sorry for everything.

It‚Äôs already been 3‚Äì4 months since I last saw you, and all this time I haven‚Äôt stopped thinking about you. I really hope that our last meeting wasn‚Äôt the final one.

I have to admit: I still love you and sincerely hope that we could have a future together. I had planned to go study in England, but there were reasons why I didn‚Äôt go, and one of them was you.

I‚Äôm not asking you to start a relationship or anything like that right away. It would be enough for me if we could just stay in touch, even once a week. I just don‚Äôt want to lose you, because I dream of one day marrying you.

I know you want to become a dentist, and I will never interfere with your studies‚Äîon the contrary, I‚Äôm ready to support you in every way. Inshalla, we could open a clinic together and build our future.
I will accept all your moods, give you flowers and joy, and do everything I can to make you happy. I will never hurt you and will never let anyone cause you pain.

You are very special to me, and I would be happy if you found the time to reply. Thank you for reading all of this.`,
    loginTitle: "Enter Personal Space",
    loginHint: "the password is your favourite cartoon character (the first letter is B)",
    loginButton: "Open",
    loginError: "Try again üíï",
    loginPlaceholder: "Enter password...",
    envelopeHint: "Click the envelope to open the letter",
    signature: "With love N ‚ù§Ô∏è",
  },
}

export default function HomePage() {
  const { isDark } = useTheme()
  const { language } = useLanguage()
  const [isMounted, setIsMounted] = useState(false)

  const [password, setPassword] = useState("")
  const [isAuthenticated, setIsAuthenticated] = useState(false)
  const [showError, setShowError] = useState(false)
  const [isEnvelopeOpen, setIsEnvelopeOpen] = useState(false)
  const [showFireworks, setShowFireworks] = useState(false)
  const [isLockOpening, setIsLockOpening] = useState(false)

  useEffect(() => {
    setIsMounted(true)
  }, [])

  if (!isMounted) return null // –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≥–∏–¥—Ä–∞—Ü–∏—é

  const letter = LETTER_CONTENT[language] || LETTER_CONTENT.ru

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    if (password === CORRECT_PASSWORD) {
      setIsLockOpening(true)
      setShowError(false)

      setTimeout(() => {
        setIsAuthenticated(true)
        setShowFireworks(true)
        setTimeout(() => setShowFireworks(false), 5000)
      }, 1500)
    } else {
      setShowError(true)
      setPassword("")
    }
  }

  if (isAuthenticated) {
    return (
      <div
        className={`min-h-screen transition-all duration-1000 ${
          isDark
            ? "bg-gradient-to-br from-purple-900 via-indigo-900 to-purple-800"
            : "bg-gradient-to-br from-pink-50 via-rose-50 to-white"
        }`}
      >
        <ThemeControls />
        <Fireworks isActive={showFireworks} isDarkMode={isDark} />
        <RomanticParticles isDarkMode={isDark} />

        {/* üé≠ –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ */}
        {/* –°—Ç–∏—Ç—á */}
        <div className="absolute top-10 left-4 sm:top-20 sm:left-8 animate-bounce">
          <div className="w-14 sm:w-20 md:w-36 lg:w-52 rounded-full overflow-hidden">
            <Image src={stich} alt="stich" width={200} height={200} className="object-contain" />
          </div>
        </div>

        {/* –ë–µ–∑–∑—É–±–∏–∫ */}
        <div className="absolute top-28 right-4 sm:top-32 sm:right-12 animate-bounce">
          <div className="w-14 sm:w-20 md:w-36 lg:w-48 rounded-full overflow-hidden">
            <Image src={toothless} alt="toothless" width={180} height={180} className="object-contain" />
          </div>
        </div>

        {/* –ö–∏—Ç—Ç–∏ */}
        <div className="absolute bottom-10 left-1/2 -translate-x-1/2 sm:bottom-20 sm:left-12 sm:translate-x-0 animate-bounce">
          <div className="w-14 sm:w-20 md:w-32 lg:w-44 rounded-full overflow-hidden">
            <Image src={kitty} alt="kitty" width={160} height={160} className="object-contain" />
          </div>
        </div>

        <div className="flex items-center justify-center min-h-screen p-4">
          <div className="text-center max-w-4xl">
            <AnimatedEnvelope
              isOpen={isEnvelopeOpen}
              onToggle={() => setIsEnvelopeOpen(!isEnvelopeOpen)}
              language={language}
              isDarkMode={isDark}
            />

            {isEnvelopeOpen && (
              <Card
                className={`max-w-md mx-auto shadow-2xl animate-fade-in transition-all duration-1000 ${
                  isDark
                    ? "bg-purple-900/90 backdrop-blur-sm border-purple-700"
                    : "bg-white/90 backdrop-blur-sm border-rose-200"
                }`}
              >
                <CardHeader className="text-center pb-3">
                  <CardTitle
                    className={`text-lg font-bold mb-2 font-caveat ${
                      isDark ? "text-rose-300" : "text-rose-600"
                    }`}
                  >
                    {letter.title}
                  </CardTitle>
                  <div className="flex justify-center gap-2">
                    {[...Array(3)].map((_, i) => (
                      <Heart
                        key={i}
                        className="w-3 h-3 animate-heart-beat text-rose-400"
                        style={{ animationDelay: `${i * 0.2}s` }}
                      />
                    ))}
                  </div>
                </CardHeader>
                <CardContent className="px-4 py-3">
                  <div className="prose prose-rose max-w-none">
                    {letter.text.split("\n\n").map((paragraph, index) => (
                      <p
                        key={index}
                        className="mb-2 leading-relaxed text-xs font-caveat text-gray-700"
                      >
                        {paragraph}
                      </p>
                    ))}
                  </div>
                  <div className="text-center mt-3 pt-2 border-t border-rose-200">
                    <p className="italic text-xs font-caveat text-rose-500">{letter.signature}</p>
                  </div>
                </CardContent>
              </Card>
            )}
          </div>
        </div>
      </div>
    )
  }

  // üîí Lock page
  return (
    <div
      className={`min-h-screen flex items-center justify-center p-4 transition-all duration-1000 ${
        isDark
          ? "bg-gradient-to-br from-purple-900 via-indigo-900 to-purple-800"
          : "bg-gradient-to-br from-pink-100 via-rose-100 to-pink-50"
      }`}
    >
      <ThemeControls />

      <div className="relative w-80 h-96">
        {/* –ó–∞–º–æ–∫ */}
        <div
          className={`absolute top-8 left-1/2 transform -translate-x-1/2 w-24 h-28 border-4 rounded-t-xl ${
            isDark ? "border-pink-400" : "border-pink-500"
          } ${isLockOpening ? "rotate-45 translate-x-8" : ""}`}
          style={{ borderBottom: "none" }}
        />

        <div
          className={`relative top-20 w-full h-48 rounded-2xl border-4 ${
            isDark
              ? "bg-gradient-to-b from-pink-500 to-rose-600 border-pink-400"
              : "bg-gradient-to-b from-pink-400 to-rose-500 border-pink-500"
          } ${isLockOpening ? "animate-pulse" : ""}`}
          style={{ borderRadius: "2rem 2rem 1.5rem 1.5rem" }}
        >
          {/* –ö–ª—é—á */}
          {isLockOpening && (
            <div className="absolute top-14 left-1/2 transform -translate-x-1/2 animate-spin-key">
              <Key
                className={`w-6 h-6 ${isDark ? "text-yellow-300" : "text-yellow-400"}`}
              />
            </div>
          )}

          {/* –í–≤–æ–¥ –ø–∞—Ä–æ–ª—è */}
          <div className="absolute bottom-4 left-4 right-4 space-y-2 text-center">
            <h2
              className={`text-base font-bold ${
                isDark ? "text-white/90" : "text-gray-800"
              }`}
            >
              {letter.loginTitle}
            </h2>
            <p
              className={`text-xs ${
                isDark ? "text-pink-100/90" : "text-white/90"
              }`}
            >
              {letter.loginHint}
            </p>
            <form onSubmit={handleSubmit} className="space-y-2">
              <Input
                type="password"
                placeholder={letter.loginPlaceholder}
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                disabled={isLockOpening}
                className={`text-center text-sm ${
                  isDark
                    ? "bg-purple-800/70 border-purple-600 text-rose-200 placeholder:text-rose-300/70 focus:border-rose-300 focus:ring-rose-300"
                    : "bg-white/80 border-rose-300 focus:border-rose-400 focus:ring-rose-400"
                }`}
              />
              {showError && <p className="text-xs text-white/90">{letter.loginError}</p>}
              <Button
                type="submit"
                disabled={isLockOpening}
                size="sm"
                className="w-full font-semibold text-xs bg-rose-600 hover:bg-rose-700 text-white"
              >
                {isLockOpening ? "–û—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è..." : letter.loginButton}
              </Button>
            </form>
          </div>
        </div>
      </div>
    </div>
  )
}
